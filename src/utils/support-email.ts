import { apiFetch } from '@/lib/api'

export interface SupportEmailRequest {
  to: string
  subject: string
  body: string
  customerInfo: {
    name?: string
    email?: string
  }
}

export const sendSupportEmail = async (request: SupportEmailRequest): Promise<boolean> => {
  try {
    await apiFetch('/api/send-support-email', {
      method: 'POST',
      body: JSON.stringify(request)
    })

    return true
  } catch (error) {
    console.error('Failed to send support email:', error)

    const fallbackEmail = createMailtoLink(request)
    window.open(fallbackEmail, '_blank')

    return false
  }
}

const createMailtoLink = (request: SupportEmailRequest): string => {
  const { to, subject, body } = request
  
  const encodedSubject = encodeURIComponent(subject)
  const encodedBody = encodeURIComponent(body)
  
  return `mailto:${to}?subject=${encodedSubject}&body=${encodedBody}`
}

export const formatSupportEmail = (
  customerName?: string,
  customerEmail?: string,
  originalQuestion?: string,
  conversationLog?: string
): SupportEmailRequest => {
  const timestamp = new Date().toLocaleString()
  
  let body = `CUSTOMER SUPPORT REQUEST\n`
  body += `========================\n\n`
  body += `Customer: ${customerName || 'Guest User'}\n`
  body += `Email: ${customerEmail || 'Not provided'}\n`
  body += `Time: ${timestamp}\n\n`
  
  if (originalQuestion) {
    body += `ORIGINAL QUESTION:\n${originalQuestion}\n\n`
  }
  
  if (conversationLog) {
    body += `CONVERSATION LOG:\n`
    body += `==================\n`
    body += conversationLog
    body += `\n\n`
  }
  
  body += `Please follow up with the customer as soon as possible.\n\n`
  body += `This message was automatically generated by the ImagineThisPrinted chatbot system.`
  
  return {
    to: import.meta.env.SUPPORT_EMAIL || 'support@imaginethisprinted.com',
    subject: `Customer Support Request - ${customerName || 'Guest User'}`,
    body,
    customerInfo: {
      name: customerName,
      email: customerEmail
    }
  }
}